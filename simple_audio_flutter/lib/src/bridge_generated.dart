// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.1.
            // ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const
            
import "bridge_definitions.dart";
import 'dart:convert';
            import 'dart:async';
            import 'package:meta/meta.dart';
            import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:convert';
            import 'dart:async';
            import 'package:meta/meta.dart';
            import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;










class SimpleAudioImpl implements SimpleAudio {
                final SimpleAudioPlatform _platform;
                factory SimpleAudioImpl(ExternalLibrary dylib) => SimpleAudioImpl.raw(SimpleAudioPlatform(dylib));

                /// Only valid on web/WASM platforms.
                factory SimpleAudioImpl.wasm(FutureOr<WasmModule> module) =>
                    SimpleAudioImpl(module as ExternalLibrary);
                SimpleAudioImpl.raw(this._platform);
Future<Player> newStaticMethodPlayer({ dynamic hint }) {
            
            return _platform.executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner.wire_new__static_method__Player(port_),
            parseSuccessData: (d) => _wire2api_player(d),
            parseErrorData: null,
            
        constMeta: kNewStaticMethodPlayerConstMeta,
        argValues: [],
        hint: hint,
        
        ));}


        FlutterRustBridgeTaskConstMeta get kNewStaticMethodPlayerConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "new__static_method__Player",
            argNames: [],
        );
        
Future<void> disposeStaticMethodPlayer({ dynamic hint }) {
            
            return _platform.executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner.wire_dispose__static_method__Player(port_),
            parseSuccessData: _wire2api_unit,
            parseErrorData: null,
            
        constMeta: kDisposeStaticMethodPlayerConstMeta,
        argValues: [],
        hint: hint,
        
        ));}


        FlutterRustBridgeTaskConstMeta get kDisposeStaticMethodPlayerConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "dispose__static_method__Player",
            argNames: [],
        );
        
Stream<PlaybackState> playbackStateStreamStaticMethodPlayer({ dynamic hint }) {
            
            return _platform.executeStream(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner.wire_playback_state_stream__static_method__Player(port_),
            parseSuccessData: _wire2api_playback_state,
            parseErrorData: null,
            
        constMeta: kPlaybackStateStreamStaticMethodPlayerConstMeta,
        argValues: [],
        hint: hint,
        
        ));}


        FlutterRustBridgeTaskConstMeta get kPlaybackStateStreamStaticMethodPlayerConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "playback_state_stream__static_method__Player",
            argNames: [],
        );
        
Stream<ProgressState> progressStateStreamStaticMethodPlayer({ dynamic hint }) {
            
            return _platform.executeStream(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner.wire_progress_state_stream__static_method__Player(port_),
            parseSuccessData: _wire2api_progress_state,
            parseErrorData: null,
            
        constMeta: kProgressStateStreamStaticMethodPlayerConstMeta,
        argValues: [],
        hint: hint,
        
        ));}


        FlutterRustBridgeTaskConstMeta get kProgressStateStreamStaticMethodPlayerConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "progress_state_stream__static_method__Player",
            argNames: [],
        );
        
Stream<Error> errorStreamStaticMethodPlayer({ dynamic hint }) {
            
            return _platform.executeStream(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner.wire_error_stream__static_method__Player(port_),
            parseSuccessData: _wire2api_error,
            parseErrorData: null,
            
        constMeta: kErrorStreamStaticMethodPlayerConstMeta,
        argValues: [],
        hint: hint,
        
        ));}


        FlutterRustBridgeTaskConstMeta get kErrorStreamStaticMethodPlayerConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "error_stream__static_method__Player",
            argNames: [],
        );
        
Future<PlaybackState> playbackStateMethodPlayer({ required Player that ,dynamic hint }) {
            var arg0 = _platform.api2wire_box_autoadd_player(that);
            return _platform.executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner.wire_playback_state__method__Player(port_, arg0),
            parseSuccessData: _wire2api_playback_state,
            parseErrorData: null,
            
        constMeta: kPlaybackStateMethodPlayerConstMeta,
        argValues: [that],
        hint: hint,
        
        ));}


        FlutterRustBridgeTaskConstMeta get kPlaybackStateMethodPlayerConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "playback_state__method__Player",
            argNames: ["that"],
        );
        
Future<ProgressState> progressMethodPlayer({ required Player that ,dynamic hint }) {
            var arg0 = _platform.api2wire_box_autoadd_player(that);
            return _platform.executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner.wire_progress__method__Player(port_, arg0),
            parseSuccessData: _wire2api_progress_state,
            parseErrorData: null,
            
        constMeta: kProgressMethodPlayerConstMeta,
        argValues: [that],
        hint: hint,
        
        ));}


        FlutterRustBridgeTaskConstMeta get kProgressMethodPlayerConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "progress__method__Player",
            argNames: ["that"],
        );
        
Future<bool> isPreloadedMethodPlayer({ required Player that ,dynamic hint }) {
            var arg0 = _platform.api2wire_box_autoadd_player(that);
            return _platform.executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner.wire_is_preloaded__method__Player(port_, arg0),
            parseSuccessData: _wire2api_bool,
            parseErrorData: null,
            
        constMeta: kIsPreloadedMethodPlayerConstMeta,
        argValues: [that],
        hint: hint,
        
        ));}


        FlutterRustBridgeTaskConstMeta get kIsPreloadedMethodPlayerConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "is_preloaded__method__Player",
            argNames: ["that"],
        );
        
Future<bool> isLoopingMethodPlayer({ required Player that ,dynamic hint }) {
            var arg0 = _platform.api2wire_box_autoadd_player(that);
            return _platform.executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner.wire_is_looping__method__Player(port_, arg0),
            parseSuccessData: _wire2api_bool,
            parseErrorData: null,
            
        constMeta: kIsLoopingMethodPlayerConstMeta,
        argValues: [that],
        hint: hint,
        
        ));}


        FlutterRustBridgeTaskConstMeta get kIsLoopingMethodPlayerConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "is_looping__method__Player",
            argNames: ["that"],
        );
        
Future<bool> isNormalizingMethodPlayer({ required Player that ,dynamic hint }) {
            var arg0 = _platform.api2wire_box_autoadd_player(that);
            return _platform.executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner.wire_is_normalizing__method__Player(port_, arg0),
            parseSuccessData: _wire2api_bool,
            parseErrorData: null,
            
        constMeta: kIsNormalizingMethodPlayerConstMeta,
        argValues: [that],
        hint: hint,
        
        ));}


        FlutterRustBridgeTaskConstMeta get kIsNormalizingMethodPlayerConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "is_normalizing__method__Player",
            argNames: ["that"],
        );
        
Future<double> volumeMethodPlayer({ required Player that ,dynamic hint }) {
            var arg0 = _platform.api2wire_box_autoadd_player(that);
            return _platform.executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner.wire_volume__method__Player(port_, arg0),
            parseSuccessData: _wire2api_f32,
            parseErrorData: null,
            
        constMeta: kVolumeMethodPlayerConstMeta,
        argValues: [that],
        hint: hint,
        
        ));}


        FlutterRustBridgeTaskConstMeta get kVolumeMethodPlayerConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "volume__method__Player",
            argNames: ["that"],
        );
        
Future<void> openMethodPlayer({ required Player that ,required String path ,required bool autoplay ,dynamic hint }) {
            var arg0 = _platform.api2wire_box_autoadd_player(that);
var arg1 = _platform.api2wire_String(path);
var arg2 = autoplay;
            return _platform.executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner.wire_open__method__Player(port_, arg0, arg1, arg2),
            parseSuccessData: _wire2api_unit,
            parseErrorData: _wire2api_error,
            
        constMeta: kOpenMethodPlayerConstMeta,
        argValues: [that, path, autoplay],
        hint: hint,
        
        ));}


        FlutterRustBridgeTaskConstMeta get kOpenMethodPlayerConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "open__method__Player",
            argNames: ["that", "path", "autoplay"],
        );
        
Future<void> preloadMethodPlayer({ required Player that ,required String path ,dynamic hint }) {
            var arg0 = _platform.api2wire_box_autoadd_player(that);
var arg1 = _platform.api2wire_String(path);
            return _platform.executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner.wire_preload__method__Player(port_, arg0, arg1),
            parseSuccessData: _wire2api_unit,
            parseErrorData: _wire2api_error,
            
        constMeta: kPreloadMethodPlayerConstMeta,
        argValues: [that, path],
        hint: hint,
        
        ));}


        FlutterRustBridgeTaskConstMeta get kPreloadMethodPlayerConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "preload__method__Player",
            argNames: ["that", "path"],
        );
        
Future<void> playPreloadMethodPlayer({ required Player that ,dynamic hint }) {
            var arg0 = _platform.api2wire_box_autoadd_player(that);
            return _platform.executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner.wire_play_preload__method__Player(port_, arg0),
            parseSuccessData: _wire2api_unit,
            parseErrorData: null,
            
        constMeta: kPlayPreloadMethodPlayerConstMeta,
        argValues: [that],
        hint: hint,
        
        ));}


        FlutterRustBridgeTaskConstMeta get kPlayPreloadMethodPlayerConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "play_preload__method__Player",
            argNames: ["that"],
        );
        
Future<void> clearPreloadMethodPlayer({ required Player that ,dynamic hint }) {
            var arg0 = _platform.api2wire_box_autoadd_player(that);
            return _platform.executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner.wire_clear_preload__method__Player(port_, arg0),
            parseSuccessData: _wire2api_unit,
            parseErrorData: null,
            
        constMeta: kClearPreloadMethodPlayerConstMeta,
        argValues: [that],
        hint: hint,
        
        ));}


        FlutterRustBridgeTaskConstMeta get kClearPreloadMethodPlayerConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "clear_preload__method__Player",
            argNames: ["that"],
        );
        
Future<void> playMethodPlayer({ required Player that ,dynamic hint }) {
            var arg0 = _platform.api2wire_box_autoadd_player(that);
            return _platform.executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner.wire_play__method__Player(port_, arg0),
            parseSuccessData: _wire2api_unit,
            parseErrorData: null,
            
        constMeta: kPlayMethodPlayerConstMeta,
        argValues: [that],
        hint: hint,
        
        ));}


        FlutterRustBridgeTaskConstMeta get kPlayMethodPlayerConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "play__method__Player",
            argNames: ["that"],
        );
        
Future<void> pauseMethodPlayer({ required Player that ,dynamic hint }) {
            var arg0 = _platform.api2wire_box_autoadd_player(that);
            return _platform.executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner.wire_pause__method__Player(port_, arg0),
            parseSuccessData: _wire2api_unit,
            parseErrorData: null,
            
        constMeta: kPauseMethodPlayerConstMeta,
        argValues: [that],
        hint: hint,
        
        ));}


        FlutterRustBridgeTaskConstMeta get kPauseMethodPlayerConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "pause__method__Player",
            argNames: ["that"],
        );
        
Future<void> stopMethodPlayer({ required Player that ,dynamic hint }) {
            var arg0 = _platform.api2wire_box_autoadd_player(that);
            return _platform.executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner.wire_stop__method__Player(port_, arg0),
            parseSuccessData: _wire2api_unit,
            parseErrorData: null,
            
        constMeta: kStopMethodPlayerConstMeta,
        argValues: [that],
        hint: hint,
        
        ));}


        FlutterRustBridgeTaskConstMeta get kStopMethodPlayerConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "stop__method__Player",
            argNames: ["that"],
        );
        
Future<void> loopPlaybackMethodPlayer({ required Player that ,required bool shouldLoop ,dynamic hint }) {
            var arg0 = _platform.api2wire_box_autoadd_player(that);
var arg1 = shouldLoop;
            return _platform.executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner.wire_loop_playback__method__Player(port_, arg0, arg1),
            parseSuccessData: _wire2api_unit,
            parseErrorData: null,
            
        constMeta: kLoopPlaybackMethodPlayerConstMeta,
        argValues: [that, shouldLoop],
        hint: hint,
        
        ));}


        FlutterRustBridgeTaskConstMeta get kLoopPlaybackMethodPlayerConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "loop_playback__method__Player",
            argNames: ["that", "shouldLoop"],
        );
        
Future<void> setVolumeMethodPlayer({ required Player that ,required double volume ,dynamic hint }) {
            var arg0 = _platform.api2wire_box_autoadd_player(that);
var arg1 = api2wire_f32(volume);
            return _platform.executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner.wire_set_volume__method__Player(port_, arg0, arg1),
            parseSuccessData: _wire2api_unit,
            parseErrorData: null,
            
        constMeta: kSetVolumeMethodPlayerConstMeta,
        argValues: [that, volume],
        hint: hint,
        
        ));}


        FlutterRustBridgeTaskConstMeta get kSetVolumeMethodPlayerConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "set_volume__method__Player",
            argNames: ["that", "volume"],
        );
        
Future<void> seekMethodPlayer({ required Player that ,required Duration position ,dynamic hint }) {
            var arg0 = _platform.api2wire_box_autoadd_player(that);
var arg1 = _platform.api2wire_Chrono_Duration(position);
            return _platform.executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner.wire_seek__method__Player(port_, arg0, arg1),
            parseSuccessData: _wire2api_unit,
            parseErrorData: null,
            
        constMeta: kSeekMethodPlayerConstMeta,
        argValues: [that, position],
        hint: hint,
        
        ));}


        FlutterRustBridgeTaskConstMeta get kSeekMethodPlayerConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "seek__method__Player",
            argNames: ["that", "position"],
        );
        
Future<void> normalizeVolumeMethodPlayer({ required Player that ,required bool shouldNormalize ,dynamic hint }) {
            var arg0 = _platform.api2wire_box_autoadd_player(that);
var arg1 = shouldNormalize;
            return _platform.executeNormal(FlutterRustBridgeTask(
            callFfi: (port_) => _platform.inner.wire_normalize_volume__method__Player(port_, arg0, arg1),
            parseSuccessData: _wire2api_unit,
            parseErrorData: null,
            
        constMeta: kNormalizeVolumeMethodPlayerConstMeta,
        argValues: [that, shouldNormalize],
        hint: hint,
        
        ));}


        FlutterRustBridgeTaskConstMeta get kNormalizeVolumeMethodPlayerConstMeta => const FlutterRustBridgeTaskConstMeta(
            debugName: "normalize_volume__method__Player",
            argNames: ["that", "shouldNormalize"],
        );
        

        DropFnType get dropOpaquePlayer => _platform.inner.drop_opaque_Player;
        ShareFnType get shareOpaquePlayer => _platform.inner.share_opaque_Player;
        OpaqueTypeFinalizer get PlayerFinalizer => _platform.PlayerFinalizer;
        


void dispose() {_platform.dispose();}
// Section: wire2api

Duration _wire2api_Chrono_Duration(dynamic raw) {
            return wire2apiDuration(_wire2api_i64(raw));
        }
        

Player _wire2api_Player(dynamic raw) {
            return Player.fromRaw(raw[0], raw[1], this);
        }
        

String _wire2api_String(dynamic raw) {
            return raw as String;
        }
        

bool _wire2api_bool(dynamic raw) {
            return raw as bool;
        }
        

Error _wire2api_error(dynamic raw) {
            switch (raw[0]) {
                case 0: return Error_NetworkStream(_wire2api_String(raw[1]),);
case 1: return Error_Decode(_wire2api_String(raw[1]),);
case 2: return Error_Open(_wire2api_String(raw[1]),);
case 3: return Error_Preload(_wire2api_String(raw[1]),);
                default: throw Exception("unreachable");
            }
        }
        

double _wire2api_f32(dynamic raw) {
            return raw as double;
        }
        

int _wire2api_i64(dynamic raw) {
            return castInt(raw);
        }
        

PlaybackState _wire2api_playback_state(dynamic raw) {
            switch (raw[0]) {
                case 0: return PlaybackState_Started(_wire2api_Chrono_Duration(raw[1]),);
case 1: return PlaybackState_Play();
case 2: return PlaybackState_Pause();
case 3: return PlaybackState_Done();
case 4: return PlaybackState_Stop();
case 5: return PlaybackState_PreloadPlayed();
                default: throw Exception("unreachable");
            }
        }
        

Player _wire2api_player(dynamic raw) {
            final arr = raw as List<dynamic>;
                if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
                return Player(bridge: this,
internal: _wire2api_Player(arr[0]),);
        }
        

ProgressState _wire2api_progress_state(dynamic raw) {
            final arr = raw as List<dynamic>;
                if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
                return ProgressState(position: _wire2api_Chrono_Duration(arr[0]),
duration: _wire2api_Chrono_Duration(arr[1]),);
        }
        

int _wire2api_u8(dynamic raw) {
            return raw as int;
        }
        

Uint8List _wire2api_uint_8_list(dynamic raw) {
            return raw as Uint8List;
        }
        

void _wire2api_unit(dynamic raw) {
            return;
        }
        
}

// Section: api2wire




@protected
                    bool api2wire_bool(bool raw) {
                        return raw;
                    }

@protected
                    double api2wire_f32(double raw) {
                        return raw;
                    }


@protected
                    int api2wire_u8(int raw) {
                        return raw;
                    }

// Section: finalizer




class SimpleAudioPlatform extends FlutterRustBridgeBase<SimpleAudioWire> {
                SimpleAudioPlatform(ffi.DynamicLibrary dylib) : super(SimpleAudioWire(dylib));

// Section: api2wire

@protected
                    int api2wire_Chrono_Duration(Duration raw) {
                        return api2wire_i64(raw.inMicroseconds);
                    }
@protected
                    wire_Player api2wire_Player(Player raw) {
                        final ptr = inner.new_Player();
                _api_fill_to_wire_Player(raw, ptr);
                return ptr;
                    }
@protected
                    ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
                        return api2wire_uint_8_list(utf8.encoder.convert(raw));
                    }

@protected
                    ffi.Pointer<wire_Player> api2wire_box_autoadd_player(Player raw) {
                        final ptr = inner.new_box_autoadd_player_0();
                        _api_fill_to_wire_player(raw, ptr.ref);
                        return ptr;
                    }

@protected
                    int api2wire_i64(int raw) {
                        return raw;
                    }


@protected
                    ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
                        final ans = inner.new_uint_8_list_0(raw.length);
                ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
                return ans;
                    }
// Section: finalizer

late final OpaqueTypeFinalizer _PlayerFinalizer = OpaqueTypeFinalizer(inner._drop_opaque_PlayerPtr);
            OpaqueTypeFinalizer get PlayerFinalizer => _PlayerFinalizer;
// Section: api_fill_to_wire



void _api_fill_to_wire_Player(Player apiObj, wire_Player wireObj) {
                wireObj.ptr = apiObj.shareOrMove();
            }





void _api_fill_to_wire_box_autoadd_player(Player apiObj, ffi.Pointer<wire_Player> wireObj) {
                _api_fill_to_wire_player(apiObj, wireObj.ref);
            }





void _api_fill_to_wire_player(Player apiObj, wire_Player wireObj) {
                wireObj.internal = api2wire_Player(apiObj.internal);
            }




}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class SimpleAudioWire implements FlutterRustBridgeWireBase {
            @internal
            late final dartApi = DartApiDl(init_frb_dart_api_dl);
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  SimpleAudioWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  SimpleAudioWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_new__static_method__Player(
    int port_,
  ) {
    return _wire_new__static_method__Player(
      port_,
    );
  }

  late final _wire_new__static_method__PlayerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_new__static_method__Player');
  late final _wire_new__static_method__Player =
      _wire_new__static_method__PlayerPtr.asFunction<void Function(int)>();

  void wire_dispose__static_method__Player(
    int port_,
  ) {
    return _wire_dispose__static_method__Player(
      port_,
    );
  }

  late final _wire_dispose__static_method__PlayerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_dispose__static_method__Player');
  late final _wire_dispose__static_method__Player =
      _wire_dispose__static_method__PlayerPtr.asFunction<void Function(int)>();

  void wire_playback_state_stream__static_method__Player(
    int port_,
  ) {
    return _wire_playback_state_stream__static_method__Player(
      port_,
    );
  }

  late final _wire_playback_state_stream__static_method__PlayerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_playback_state_stream__static_method__Player');
  late final _wire_playback_state_stream__static_method__Player =
      _wire_playback_state_stream__static_method__PlayerPtr
          .asFunction<void Function(int)>();

  void wire_progress_state_stream__static_method__Player(
    int port_,
  ) {
    return _wire_progress_state_stream__static_method__Player(
      port_,
    );
  }

  late final _wire_progress_state_stream__static_method__PlayerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_progress_state_stream__static_method__Player');
  late final _wire_progress_state_stream__static_method__Player =
      _wire_progress_state_stream__static_method__PlayerPtr
          .asFunction<void Function(int)>();

  void wire_error_stream__static_method__Player(
    int port_,
  ) {
    return _wire_error_stream__static_method__Player(
      port_,
    );
  }

  late final _wire_error_stream__static_method__PlayerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_error_stream__static_method__Player');
  late final _wire_error_stream__static_method__Player =
      _wire_error_stream__static_method__PlayerPtr
          .asFunction<void Function(int)>();

  void wire_playback_state__method__Player(
    int port_,
    ffi.Pointer<wire_Player> that,
  ) {
    return _wire_playback_state__method__Player(
      port_,
      that,
    );
  }

  late final _wire_playback_state__method__PlayerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Player>)>>(
      'wire_playback_state__method__Player');
  late final _wire_playback_state__method__Player =
      _wire_playback_state__method__PlayerPtr
          .asFunction<void Function(int, ffi.Pointer<wire_Player>)>();

  void wire_progress__method__Player(
    int port_,
    ffi.Pointer<wire_Player> that,
  ) {
    return _wire_progress__method__Player(
      port_,
      that,
    );
  }

  late final _wire_progress__method__PlayerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_Player>)>>('wire_progress__method__Player');
  late final _wire_progress__method__Player = _wire_progress__method__PlayerPtr
      .asFunction<void Function(int, ffi.Pointer<wire_Player>)>();

  void wire_is_preloaded__method__Player(
    int port_,
    ffi.Pointer<wire_Player> that,
  ) {
    return _wire_is_preloaded__method__Player(
      port_,
      that,
    );
  }

  late final _wire_is_preloaded__method__PlayerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_Player>)>>('wire_is_preloaded__method__Player');
  late final _wire_is_preloaded__method__Player =
      _wire_is_preloaded__method__PlayerPtr
          .asFunction<void Function(int, ffi.Pointer<wire_Player>)>();

  void wire_is_looping__method__Player(
    int port_,
    ffi.Pointer<wire_Player> that,
  ) {
    return _wire_is_looping__method__Player(
      port_,
      that,
    );
  }

  late final _wire_is_looping__method__PlayerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_Player>)>>('wire_is_looping__method__Player');
  late final _wire_is_looping__method__Player =
      _wire_is_looping__method__PlayerPtr
          .asFunction<void Function(int, ffi.Pointer<wire_Player>)>();

  void wire_is_normalizing__method__Player(
    int port_,
    ffi.Pointer<wire_Player> that,
  ) {
    return _wire_is_normalizing__method__Player(
      port_,
      that,
    );
  }

  late final _wire_is_normalizing__method__PlayerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Player>)>>(
      'wire_is_normalizing__method__Player');
  late final _wire_is_normalizing__method__Player =
      _wire_is_normalizing__method__PlayerPtr
          .asFunction<void Function(int, ffi.Pointer<wire_Player>)>();

  void wire_volume__method__Player(
    int port_,
    ffi.Pointer<wire_Player> that,
  ) {
    return _wire_volume__method__Player(
      port_,
      that,
    );
  }

  late final _wire_volume__method__PlayerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_Player>)>>('wire_volume__method__Player');
  late final _wire_volume__method__Player = _wire_volume__method__PlayerPtr
      .asFunction<void Function(int, ffi.Pointer<wire_Player>)>();

  void wire_open__method__Player(
    int port_,
    ffi.Pointer<wire_Player> that,
    ffi.Pointer<wire_uint_8_list> path,
    bool autoplay,
  ) {
    return _wire_open__method__Player(
      port_,
      that,
      path,
      autoplay,
    );
  }

  late final _wire_open__method__PlayerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_Player>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Bool)>>('wire_open__method__Player');
  late final _wire_open__method__Player =
      _wire_open__method__PlayerPtr.asFunction<
          void Function(int, ffi.Pointer<wire_Player>,
              ffi.Pointer<wire_uint_8_list>, bool)>();

  void wire_preload__method__Player(
    int port_,
    ffi.Pointer<wire_Player> that,
    ffi.Pointer<wire_uint_8_list> path,
  ) {
    return _wire_preload__method__Player(
      port_,
      that,
      path,
    );
  }

  late final _wire_preload__method__PlayerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Player>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_preload__method__Player');
  late final _wire_preload__method__Player =
      _wire_preload__method__PlayerPtr.asFunction<
          void Function(
              int, ffi.Pointer<wire_Player>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_play_preload__method__Player(
    int port_,
    ffi.Pointer<wire_Player> that,
  ) {
    return _wire_play_preload__method__Player(
      port_,
      that,
    );
  }

  late final _wire_play_preload__method__PlayerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_Player>)>>('wire_play_preload__method__Player');
  late final _wire_play_preload__method__Player =
      _wire_play_preload__method__PlayerPtr
          .asFunction<void Function(int, ffi.Pointer<wire_Player>)>();

  void wire_clear_preload__method__Player(
    int port_,
    ffi.Pointer<wire_Player> that,
  ) {
    return _wire_clear_preload__method__Player(
      port_,
      that,
    );
  }

  late final _wire_clear_preload__method__PlayerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_Player>)>>('wire_clear_preload__method__Player');
  late final _wire_clear_preload__method__Player =
      _wire_clear_preload__method__PlayerPtr
          .asFunction<void Function(int, ffi.Pointer<wire_Player>)>();

  void wire_play__method__Player(
    int port_,
    ffi.Pointer<wire_Player> that,
  ) {
    return _wire_play__method__Player(
      port_,
      that,
    );
  }

  late final _wire_play__method__PlayerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_Player>)>>('wire_play__method__Player');
  late final _wire_play__method__Player = _wire_play__method__PlayerPtr
      .asFunction<void Function(int, ffi.Pointer<wire_Player>)>();

  void wire_pause__method__Player(
    int port_,
    ffi.Pointer<wire_Player> that,
  ) {
    return _wire_pause__method__Player(
      port_,
      that,
    );
  }

  late final _wire_pause__method__PlayerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_Player>)>>('wire_pause__method__Player');
  late final _wire_pause__method__Player = _wire_pause__method__PlayerPtr
      .asFunction<void Function(int, ffi.Pointer<wire_Player>)>();

  void wire_stop__method__Player(
    int port_,
    ffi.Pointer<wire_Player> that,
  ) {
    return _wire_stop__method__Player(
      port_,
      that,
    );
  }

  late final _wire_stop__method__PlayerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_Player>)>>('wire_stop__method__Player');
  late final _wire_stop__method__Player = _wire_stop__method__PlayerPtr
      .asFunction<void Function(int, ffi.Pointer<wire_Player>)>();

  void wire_loop_playback__method__Player(
    int port_,
    ffi.Pointer<wire_Player> that,
    bool should_loop,
  ) {
    return _wire_loop_playback__method__Player(
      port_,
      that,
      should_loop,
    );
  }

  late final _wire_loop_playback__method__PlayerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Player>,
              ffi.Bool)>>('wire_loop_playback__method__Player');
  late final _wire_loop_playback__method__Player =
      _wire_loop_playback__method__PlayerPtr
          .asFunction<void Function(int, ffi.Pointer<wire_Player>, bool)>();

  void wire_set_volume__method__Player(
    int port_,
    ffi.Pointer<wire_Player> that,
    double volume,
  ) {
    return _wire_set_volume__method__Player(
      port_,
      that,
      volume,
    );
  }

  late final _wire_set_volume__method__PlayerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Player>,
              ffi.Float)>>('wire_set_volume__method__Player');
  late final _wire_set_volume__method__Player =
      _wire_set_volume__method__PlayerPtr
          .asFunction<void Function(int, ffi.Pointer<wire_Player>, double)>();

  void wire_seek__method__Player(
    int port_,
    ffi.Pointer<wire_Player> that,
    int position,
  ) {
    return _wire_seek__method__Player(
      port_,
      that,
      position,
    );
  }

  late final _wire_seek__method__PlayerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Player>,
              ffi.Int64)>>('wire_seek__method__Player');
  late final _wire_seek__method__Player = _wire_seek__method__PlayerPtr
      .asFunction<void Function(int, ffi.Pointer<wire_Player>, int)>();

  void wire_normalize_volume__method__Player(
    int port_,
    ffi.Pointer<wire_Player> that,
    bool should_normalize,
  ) {
    return _wire_normalize_volume__method__Player(
      port_,
      that,
      should_normalize,
    );
  }

  late final _wire_normalize_volume__method__PlayerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Player>,
              ffi.Bool)>>('wire_normalize_volume__method__Player');
  late final _wire_normalize_volume__method__Player =
      _wire_normalize_volume__method__PlayerPtr
          .asFunction<void Function(int, ffi.Pointer<wire_Player>, bool)>();

  wire_Player new_Player() {
    return _new_Player();
  }

  late final _new_PlayerPtr =
      _lookup<ffi.NativeFunction<wire_Player Function()>>('new_Player');
  late final _new_Player = _new_PlayerPtr.asFunction<wire_Player Function()>();

  ffi.Pointer<wire_Player> new_box_autoadd_player_0() {
    return _new_box_autoadd_player_0();
  }

  late final _new_box_autoadd_player_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Player> Function()>>(
          'new_box_autoadd_player_0');
  late final _new_box_autoadd_player_0 = _new_box_autoadd_player_0Ptr
      .asFunction<ffi.Pointer<wire_Player> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>(
      'new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void drop_opaque_Player(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_Player(
      ptr,
    );
  }

  late final _drop_opaque_PlayerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'drop_opaque_Player');
  late final _drop_opaque_Player =
      _drop_opaque_PlayerPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_Player(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_Player(
      ptr,
    );
  }

  late final _share_opaque_PlayerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('share_opaque_Player');
  late final _share_opaque_Player = _share_opaque_PlayerPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}



final class wire_Player extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;

