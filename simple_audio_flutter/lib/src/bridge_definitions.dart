// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;

part 'bridge_definitions.freezed.dart';

abstract class SimpleAudio {
  Future<Player> newStaticMethodPlayer({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNewStaticMethodPlayerConstMeta;

  Future<void> disposeStaticMethodPlayer({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDisposeStaticMethodPlayerConstMeta;

  Future<PlaybackState> playbackStateMethodPlayer(
      {required Player that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPlaybackStateMethodPlayerConstMeta;

  Future<ProgressState> progressMethodPlayer(
      {required Player that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kProgressMethodPlayerConstMeta;

  /// Returns `true` if there is a file preloaded for playback.
  Future<bool> isPreloadedMethodPlayer({required Player that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIsPreloadedMethodPlayerConstMeta;

  Future<bool> isLoopingMethodPlayer({required Player that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIsLoopingMethodPlayerConstMeta;

  Future<bool> isNormalizingMethodPlayer({required Player that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIsNormalizingMethodPlayerConstMeta;

  Future<double> volumeMethodPlayer({required Player that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kVolumeMethodPlayerConstMeta;

  Future<void> openMethodPlayer(
      {required Player that,
      required String path,
      required bool autoplay,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kOpenMethodPlayerConstMeta;

  Future<void> preloadMethodPlayer(
      {required Player that, required String path, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPreloadMethodPlayerConstMeta;

  Future<void> playPreloadMethodPlayer({required Player that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPlayPreloadMethodPlayerConstMeta;

  Future<void> clearPreloadMethodPlayer({required Player that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kClearPreloadMethodPlayerConstMeta;

  Future<void> playMethodPlayer({required Player that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPlayMethodPlayerConstMeta;

  Future<void> pauseMethodPlayer({required Player that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPauseMethodPlayerConstMeta;

  Future<void> stopMethodPlayer({required Player that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStopMethodPlayerConstMeta;

  Future<void> loopPlaybackMethodPlayer(
      {required Player that, required bool shouldLoop, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLoopPlaybackMethodPlayerConstMeta;

  Future<void> setVolumeMethodPlayer(
      {required Player that, required double volume, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetVolumeMethodPlayerConstMeta;

  Future<void> seekMethodPlayer(
      {required Player that, required Duration position, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSeekMethodPlayerConstMeta;

  Future<void> normalizeVolumeMethodPlayer(
      {required Player that, required bool shouldNormalize, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNormalizeVolumeMethodPlayerConstMeta;

  DropFnType get dropOpaquePlayer;
  ShareFnType get shareOpaquePlayer;
  OpaqueTypeFinalizer get PlayerFinalizer;
}

@sealed
class Player extends FrbOpaque {
  final SimpleAudio bridge;
  Player.fromRaw(int ptr, int size, this.bridge) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => bridge.dropOpaquePlayer;

  @override
  ShareFnType get shareFn => bridge.shareOpaquePlayer;

  @override
  OpaqueTypeFinalizer get staticFinalizer => bridge.PlayerFinalizer;
}

@freezed
sealed class Error with _$Error implements FrbException {
  /// An error occurred when trying to fetch more bytes for
  /// a network stream.
  const factory Error.networkStream(
    String field0,
  ) = Error_NetworkStream;

  /// An error occurred when decoding the file.
  const factory Error.decode(
    String field0,
  ) = Error_Decode;

  /// An error occurred when trying to open a file.
  const factory Error.open(
    String field0,
  ) = Error_Open;

  /// An error occurred when trying to preload a file.
  const factory Error.preload(
    String field0,
  ) = Error_Preload;
}

@freezed
sealed class PlaybackState with _$PlaybackState {
  /// The player started playing the file.
  const factory PlaybackState.started(
    Duration field0,
  ) = PlaybackState_Started;

  /// The player is currently playing the file.
  const factory PlaybackState.play() = PlaybackState_Play;

  /// The player is currently paused and there is no output.
  const factory PlaybackState.pause() = PlaybackState_Pause;

  /// The player has finished playing the file.
  const factory PlaybackState.done() = PlaybackState_Done;

  /// The player was stopped
  const factory PlaybackState.stop() = PlaybackState_Stop;

  /// The player has automatically started playing the preloaded file.
  const factory PlaybackState.preloadPlayed() = PlaybackState_PreloadPlayed;
}

class Player {
  final SimpleAudio bridge;
  final Player internal;

  const Player({
    required this.bridge,
    required this.internal,
  });

  static Future<Player> newPlayer(
          {required SimpleAudio bridge, dynamic hint}) =>
      bridge.newStaticMethodPlayer(hint: hint);

  static Future<void> dispose({required SimpleAudio bridge, dynamic hint}) =>
      bridge.disposeStaticMethodPlayer(hint: hint);

  Future<PlaybackState> playbackState({dynamic hint}) =>
      bridge.playbackStateMethodPlayer(
        that: this,
      );

  Future<ProgressState> progress({dynamic hint}) => bridge.progressMethodPlayer(
        that: this,
      );

  /// Returns `true` if there is a file preloaded for playback.
  Future<bool> isPreloaded({dynamic hint}) => bridge.isPreloadedMethodPlayer(
        that: this,
      );

  Future<bool> isLooping({dynamic hint}) => bridge.isLoopingMethodPlayer(
        that: this,
      );

  Future<bool> isNormalizing({dynamic hint}) =>
      bridge.isNormalizingMethodPlayer(
        that: this,
      );

  Future<double> volume({dynamic hint}) => bridge.volumeMethodPlayer(
        that: this,
      );

  Future<void> open(
          {required String path, required bool autoplay, dynamic hint}) =>
      bridge.openMethodPlayer(
        that: this,
        path: path,
        autoplay: autoplay,
      );

  Future<void> preload({required String path, dynamic hint}) =>
      bridge.preloadMethodPlayer(
        that: this,
        path: path,
      );

  Future<void> playPreload({dynamic hint}) => bridge.playPreloadMethodPlayer(
        that: this,
      );

  Future<void> clearPreload({dynamic hint}) => bridge.clearPreloadMethodPlayer(
        that: this,
      );

  Future<void> play({dynamic hint}) => bridge.playMethodPlayer(
        that: this,
      );

  Future<void> pause({dynamic hint}) => bridge.pauseMethodPlayer(
        that: this,
      );

  Future<void> stop({dynamic hint}) => bridge.stopMethodPlayer(
        that: this,
      );

  Future<void> loopPlayback({required bool shouldLoop, dynamic hint}) =>
      bridge.loopPlaybackMethodPlayer(
        that: this,
        shouldLoop: shouldLoop,
      );

  Future<void> setVolume({required double volume, dynamic hint}) =>
      bridge.setVolumeMethodPlayer(
        that: this,
        volume: volume,
      );

  Future<void> seek({required Duration position, dynamic hint}) =>
      bridge.seekMethodPlayer(
        that: this,
        position: position,
      );

  Future<void> normalizeVolume({required bool shouldNormalize, dynamic hint}) =>
      bridge.normalizeVolumeMethodPlayer(
        that: this,
        shouldNormalize: shouldNormalize,
      );
}

class ProgressState {
  /// The position of the player.
  final Duration position;

  /// The duration of the file that is being played.
  final Duration duration;

  const ProgressState({
    required this.position,
    required this.duration,
  });
}
